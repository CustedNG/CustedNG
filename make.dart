#!/usr/bin/env dart
import 'dart:convert';
import 'dart:io';

Future<int> getGitCommitCount() async {
  final result = await Process.run('git', ['log', '--oneline']);
  return (result.stdout as String)
      .split('\n')
      .where((line) => line.isNotEmpty)
      .length;
}

Future<int> getGitModificationCount() async {
  final result =
      await Process.run('git', ['ls-files', '-mo', '--exclude-standard']);
  return (result.stdout as String)
      .split('\n')
      .where((line) => line.isNotEmpty)
      .length;
}

Future<String> getFlutterVersion() async {
  final result = await Process.run('flutter', ['--version'], runInShell: true);
  return (result.stdout as String);
}

Future<Map<String, dynamic>> getBuildData() async {
  final data = {
    'name': 'CustedNG',
    'build': await getGitCommitCount(),
    'engine': await getFlutterVersion(),
    'buildAt': DateTime.now().toString(),
    'modifications': await getGitModificationCount(),
  };
  return data;
}

String jsonEncodeWithIndent(Map<String, dynamic> json) {
  final encoder = JsonEncoder.withIndent('  ');
  return encoder.convert(json);
}

String generateDataClass(Map<String, dynamic> data) {
  final buffer = StringBuffer();
  buffer.writeln('// This file is generated by ./make.dart');
  buffer.writeln('');
  buffer.writeln('class BuildData {');
  for (var entry in data.entries) {
    final type = entry.value.runtimeType;
    final value = json.encode(entry.value);
    buffer.writeln('  static $type ${entry.key} = $value;');
  }
  buffer.writeln('}');
  return buffer.toString();
}

Future<void> updateBuildData() async {
  print('Updating BuildData...');
  final data = await getBuildData();
  print(jsonEncodeWithIndent(data));
  final path = 'lib/res/build_data.dart';
  await File(path).writeAsString(generateDataClass(data));
}

void flutterRun() {
  Process.start('flutter', ['run'],
      mode: ProcessStartMode.inheritStdio, runInShell: true);
}

void flutterBuildAndriod() async {
  final build = await getGitCommitCount();

  final args = [
    'build',
    'apk',
    '--target-platform=android-arm64',
    '--build-number=$build',
    '--build-name=1.0.$build',
    '-v'
  ];
  print('Building with args: ${args.join(' ')}');
  await Process.run('flutter', args, runInShell: true);

  final copySource = './build/app/outputs/apk/release/app-release.apk';
  final copyTarget = './CustedNG_${build}_Arm.apk';
  print('Copying from $copySource to $copyTarget');

  await File(copySource).copy(copyTarget);
  print('Done.');
}

void main(List<String> args) async {
  await updateBuildData();

  if (args.isEmpty) {
    print('No action. Exit.');
    return;
  }

  final command = args[0];

  switch (command) {
    case 'run':
      return flutterRun();
    case 'build':
      return flutterBuildAndriod();
    default:
      print('Unsupported command: $command');
      return;
  }
}
